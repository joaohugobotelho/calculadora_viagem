// Seleciona o formul√°rio com o ID "formViagem"
const form = document.getElementById("form-viagem");

// Adiciona um ouvinte de evento que ser√° executado quando o formul√°rio for enviado
form.addEventListener("submit", async (e) => {
  // Impede o comportamento padr√£o do formul√°rio (recarregar a p√°gina)
  e.preventDefault();

  // Pega o valor digitado no campo de origem
  const origem = document.getElementById("origem").value;

  // Pega o valor digitado no campo de destino
  const destino = document.getElementById("destino").value;

  // Converte o valor digitado no campo de autonomia para n√∫mero decimal
  const autonomia = parseFloat(document.getElementById("autonomia").value);

  // Converte o valor digitado no campo de pre√ßo para n√∫mero decimal
  const preco = parseFloat(document.getElementById("preco").value);

  // Chave da API do OpenRouteService (substitua pela sua se necess√°rio)
  const apiKey = "5b3ce3597851110001cf6248b783921a7b394aefa496769ccf9d6ba2";

  // Fun√ß√£o auxiliar para buscar as coordenadas de uma cidade usando geocodifica√ß√£o
  async function getCoordinates(city) {
    // Faz a requisi√ß√£o para a API de geocodifica√ß√£o passando o nome da cidade
    const res = await fetch(
      `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(
        city
      )}`
    );
    // Converte a resposta para JSON
    const data = await res.json();

    // Retorna as coordenadas da primeira correspond√™ncia encontrada (longitude, latitude)
    return data.features[0]?.geometry.coordinates;
  }

  // Obt√©m as coordenadas da cidade de origem
  const start = await getCoordinates(origem);

  // Obt√©m as coordenadas da cidade de destino
  const end = await getCoordinates(destino);

  // Se alguma cidade n√£o for encontrada, exibe um alerta e cancela o fluxo
  if (!start || !end) {
    alert("N√£o foi poss√≠vel localizar uma ou ambas as cidades.");
    return;
  }

  // Faz uma requisi√ß√£o POST para a API de rotas para calcular a dist√¢ncia
  const response = await fetch(
    "https://api.openrouteservice.org/v2/directions/driving-car/geojson",
    {
      method: "POST",
      headers: {
        Authorization: apiKey, // Autentica√ß√£o com a chave da API
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        coordinates: [start, end], // Envia as coordenadas no formato esperado
      }),
    }
  );

  // Converte a resposta da API de rotas para JSON
  const data = await response.json();

  // Extrai a dist√¢ncia em metros e converte para quil√¥metros
  const distancia = data.features[0].properties.summary.distance / 1000;

  // Calcula o custo da viagem com base na autonomia e no pre√ßo do combust√≠vel
  const custo = ((distancia / autonomia) * preco).toFixed(2);

  // Atualiza o conte√∫do da div com ID "resultado" exibindo a dist√¢ncia e o custo
  document.getElementById("resultado").innerText = `üõ£Ô∏è ${distancia.toFixed(
    2
  )} km - üí∏ R$ ${custo}`;
});